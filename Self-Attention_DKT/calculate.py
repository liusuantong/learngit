#!/usr/bin/python
# -*- coding: UTF-8 -*-
import pymysql
FHL1 = [[1700,1600,1500,1400,1300,1240,1180,1120,1060,1000,940,880,820,760,700,660,620,580,540,500],
          [2000,1900,1800,1650,1500,1430,1360,1290,1220,1150,1080,1010,940,870,800,750,700,650,600,550],
          [2300,2200,2100,1900,1700,1620,1540,1460,1380,1300,1220,1140,1060,980,900,840,780,720,660,600],
          [2600,2500,2400,2150,1900,1820,1740,1660,1580,1500,1420,1340,1260,1180,1100,1030,960,890,820,750],
          [2900,2800,2700,2450,2200,2110,2020,1930,1840,1750,1660,1570,1480,1390,1300,1220,1140,1060,980,900],
          [3200,3100,3000,2750,2500,2400,2300,2200,2100,2000,1900,1800,1700,1600,1500,1410,1320,1230,1140,1050],
          [3640,3520,3400,3150,2900,2780,2660,2540,2420,2300,2180,2060,1940,1820,1700,1600,1500,1400,1300,1200],
          [3940,3820,3700,3450,3200,3080,2960,2840,2720,2600,2480,2360,2240,2120,2000,1890,1780,1670,1560,1450],
          [4240,4120,4000,3750,3500,3380,3260,3140,3020,2900,2780,2660,2540,2420,2300,2180,2060,1940,1820,1700]]
FHL2 = [[1400,1300,1200,1100,1000,960,920,880,840,800,760,720,680,640,600,580,560,540,520,500],
          [1600,1500,1400,1300,1200,1150,1100,1050,1000,950,900,850,800,750,700,680,660,640,620,600],
          [1800,1700,1600,1500,1400,1340,1280,1220,1160,1100,1040,980,920,860,800,780,760,740,720,700],
          [2000,1900,1800,1700,1600,1530,1460,1390,1320,1250,1180,1110,1040,970,900,880,860,840,820,800],
          [2250,2150,2050,1950,1850,1770,1690,1610,1530,1450,1370,1290,1210,1130,1050,1020,990,960,930,900],
          [2500,2400,2300,2200,2100,2010,1920,1830,1740,1650,1560,1470,1380,1290,1200,1170,1140,1110,1080,1050],
          [2750,2650,2550,2450,2350,2250,2150,2050,1950,1850,1750,1650,1550,1450,1350,1310,1270,1230,1190,1150],
          [2900,2850,2800,2650,2500,2400,2300,2200,2100,2000,1900,1800,1700,1600,1500,1460,1420,1380,1340,1300],
          [3050,3000,2950,2800,2650,2550,2450,2350,2250,2150,2050,1950,1850,1750,1650,1610,1570,1530,1490,1450]]
ZWTQQ1 = [[16.1,14.6,13.0,12.0,11.0,9.9,8.8,7.7,6.6,5.5,4.4,3.3,2.2,1.1,0.0,-0.8,-1.6,-2.4,-3.2,-4.0],
          [16.2,14.7,13.2,11.9,10.6,9.5,8.4,7.3,6.2,5.1,4.0,2.9,1.8,0.7,-0.4,-1.2,-2.0,-2.8,-3.6,-4.4],
          [16.3,14.9,13.4,11.8,10.2,9.1,8.0,6.9,5.8,4.7,3.6,2.5,1.4,0.3,-0.8,-1.6,-2.4,-3.2,-4.0,-4.8],
          [16.4,15.0,13.6,11.7,9.8,8.6,7.4,6.2,5.0,3.8,2.6,1.4,0.2,-1.0,-2.2,-3.2,-4.2,-5.2,-6.2,-7.2],
          [16.5,15.2,13.8,11.6,9.4,8.2,7.0,5.8,4.6,3.4,2.2,1.0,-0.2,-1,4,-2.6,-3.6,-4.6,-5.6,-6.6,-7.6],
          [16.6,15.3,14.0,11.5,9.0,7.7,6.4,5.1,3.8,2.5,1.2,-0.1,-1.4,-2.7,-4.0,-5.0,-6.0,-7.0,-8.0,-9.0],
          [17.6,15.9,14.2,12.3,10.4,9.1,7.8,6.5,5.2,3.9,2.6,1.3,0.0,-1.3,-2.6,-3.8,-5.0,-6.2,-7.4,-8.6],
          [19.6,17.7,15.8,13.7,11.6,10.3,9.0,7.7,6.4,5.1,3.8,2.5,1.2,-0.1,-1.4,-2.6,-3.8,-5.0,-6.2,-7.4],
          [21.6,19.7,17.8,15.8,13.8,12.4,11.0,9.6,8.2,6.8,5.4,4.0,2.6,1.2,-0.2,-1.4,-2.6,-3.8,-5.0,-6.2]]
ZWTQQ2 = [[18.6,17.3,16.0,14.7,13.4,12.3,11.2,10.1,9.0,7.9,6.8,5.7,4.6,3.5,2.4,1.6,0.8,0.0,-0.8,-1.6],
          [18.9,17.6,16.3,14.8,13.3,12.2,11.1,10.0,8.9,7.8,6.7,5.6,4.5,3.4,2.3,1.5,0.7,-0.1,-0.9,-1.7],
          [19.2,17.9,16.6,14.9,13.2,12.1,11.0,9.9,8.8,7.7,6.6,5.5,4.4,3.3,2.2,1.4,0.6,-0.2,-1.0,-1.8],
          [19.5,18.1,16.9,15.0,13.1,12.0,10.9,9.8,8.7,7.6,6.5,5.4,4.3,3.2,2.1,1.3,0.5,-0.3,-1.1,-1.9],
          [19.8,18.5,17.2,15.1,13.0,11.9,10.8,9.7,8.6,7.5,6.4,5.3,4.2,3.1,2.0,1.2,0.4,-0.4,-1.2,-2.0],
          [19.9,18.7,17.5,15.2,12.9,11.8,10.7,9.6,8.5,7.4,6.3,5.2,4.1,3.0,1.9,1.1,0.3,-0.5,-1.3,-2.1],
          [21.8,20.1,18.4,16.7,15.0,13.7,12.4,11.1,9.8,8.5,7.2,5.9,4.6,3.3,2.0,1.2,0.4,-0.4,-1.2,-2.0],
          [22.7,21.0,19.3,17.6,15.9,14.6,13.3,12.0,10.7,9.4,8.1,6.8,5.5,4.2,2.9,2.1,1.3,0.5,-0.3,-1.1],
          [23.5,21.8,20.1,18.4,16.7,15.4,14.1,12.8,11.5,10.2,8.9,7.6,6.3,5.0,3.7,2.9,2.1,1.3,0.5,-0.3]]
YWQZ1 = [[48,45,42,39,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6],
         [49,46,43,40,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7],
         [50,47,44,41,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8],
         [51,48,45,42,39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9]]
YWQZ2 = [[46,44,42,39,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6],
        [47,45,43,40,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7],
        [48,46,44,41,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8],
        [49,47,45,42,39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9],
        [50,48,46,43,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10],
        [51,49,47,44,41,39,37,35,33,31,29,27,25,23,21,19,17,15,13,11],
        [52,50,48,45,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12]]
YTXS = [[13,12,11,10,9,8,7,6,5,4,3,2,1],
        [14,13,12,11,10,9,8,7,6,5,4,3,2,1],
        [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]]
LDTY1 = [[225,218,211,203,195,191,187,183,179,175,171,167,163,159,155,150,145,140,135,130],
         [240,233,226,218,210,206,202,198,194,190,186,182,178,174,170,165,160,155,150,145],
         [250,245,240,233,225,221,217,213,209,205,201,197,193,189,185,180,175,170,165,160]]
LDTY2 = [[196,190,184,177,170,167,164,161,158,155,152,149,146,143,140,135,130,125,120,115],
         [200,194,188,181,174,171,168,165,162,159,156,153,150,147,144,139,134,129,124,119],
         [202,196,190,183,176,173,170,167,164,161,158,155,152,149,146,141,136,131,126,121]]
TS1 = [[109,104,99,93,87,80,73,66,59,52,45,38,31,24,17,14,11,8,5,2],
       [117,112,107,101,95,88,81,74,67,60,53,46,39,32,25,22,19,16,13,10],
       [126,121,116,110,104,97,90,83,76,69,62,55,48,41,34,31,28,25,22,19],
       [137,132,127,121,115,108,101,94,87,80,73,66,59,52,45,42,39,36,33,30],
       [148,143,138,132,126,119,112,105,98,91,84,77,70,63,56,53,50,47,44,41],
       [157,152,147,141,135,128,121,114,107,100,93,86,79,72,65,62,59,56,53,50]]
TS2 = [[117,110,103,95,87,80,73,66,59,52,45,38,31,24,17,14,11,8,5,2],
       [127,120,113,105,97,90,83,76,69,62,55,48,41,34,27,24,21,18,15,12],
       [139,132,125,117,109,102,95,88,81,74,67,60,53,46,39,36,33,30,27,24],
       [149,142,135,127,119,112,105,98,91,84,77,70,63,56,49,46,43,40,37,34],
       [158,151,144,136,128,121,114,107,100,93,86,79,72,65,58,55,52,49,46,43],
       [166,159,152,144,136,129,122,115,108,101,94,87,80,73,66,63,60,57,54,51]]
FMP1 = [[10.2,10.3,10.4,10.5,10.6,10.8,11.0,11.2,11.4,11.6,11.8,12.0,12.2,12.4,12.6,12.8,13.0,13.2,13.4,13.6],
       [9.6,9.7,9.8,9.9,10.0,10.2,10.4,10.6,10.8,11.0,11.2,11.4,11.6,11.8,12.0,12.2,12.4,12.6,12.8,13.0],
       [9.1,9.2,9.3,9.4,9.5,9.7,9.9,10.1,10.3,10.5,10.7,10.9,11.1,11.3,11.5,11.7,11.9,12.1,12.3,12.5],
       [8.7,8.8,8.9,9.0,9.1,9.3,9.5,9.7,9.9,10.1,10.3,10.5,10.7,10.9,11.1,11.3,11.5,11.7,11.9,12.1],
       [8.4,8.5,8.6,8.7,8.8,9.0,9.2,9.4,9.6,9.8,10.0,10.2,10.4,10.6,10.8,11.0,11.2,11.4,11.6,11.8],
       [8.2,8.3,8.4,8.5,8.6,8.8,9.0,9.2,9.4,9.6,9.8,10.0,10.2,10.4,10.6,10.8,11.0,11.2,11.4,11.6],
       [7.8,7.9,8.0,8.1,8.2,8.4,8.6,8.8,9.0,9.2,9.4,9.6,9.8,10.0,10.2,10.4,10.6,10.8,11.0,11.2],
       [7.5,7.6,7.7,7.8,7.9,8.1,8.3,8.5,8.7,8.9,9.1,9.3,9.5,9.7,9.9,10.1,10.3,10.5,10.7,10.9],
       [7.3,7.4,7.5,7.6,7.7,7.9,8.1,8.3,8.5,8.7,8.9,9.1,9.3,9.5,9.7,9.9,10.1,10.3,10.5,10.7]]
FMP2 = [[11.0,11.1,11.2,11.5,11.8,12.0,12.2,12.4,12.6,12.8,13.0,13.2,13.4,13.6,13.8,14.0,14.2,14.4,14.6,14.8],
       [10.0,10.1,10.2,10.5,10.8,11.0,11.2,11.4,11.6,11.8,12.0,12.2,12.4,12.6,12.8,13.0,13.2,13.4,13.6,13.8],
       [9.2,9.3,9.4,9.7,10.0,10.2,10.4,10.6,10.8,11.0,11.2,11.4,11.6,11.8,12.0,12.2,12.4,12.6,12.8,13.0],
       [8.7,8.8,8.9,9.2,9.5,9.7,9.9,10.1,10.3,10.5,10.7,10.9,11.1,11.3,11.5,11.7,11.9,12.1,12.3,12.5],
       [8.3,8.4,8.5,8.8,9.1,9.3,9.5,9.7,9.9,10.1,10.3,10.5,10.7,10.9,11.1,11.3,11.5,11.7,11.9,12.1],
       [8.2,8.3,8.4,8.7,9.0,9.2,9.4,9.6,9.8,10.0,10.2,10.4,10.6,10.8,11.0,11.2,11.4,11.6,11.8,12.0],
       [8.1,8.2,8.3,8.6,8.9,9.1,9.3,9.5,9.7,9.9,10.1,10.3,10.5,10.7,10.9,11.1,11.3,11.5,11.7,11.9],
       [8.0,8.1,8.2,8.5,8.8,9.0,9.2,9.4,9.6,9.8,10.0,10.2,10.4,10.6,10.8,11.0,11.2,11.4,11.6,11.8],
       [7.9,8.0,8.1,8.4,8.7,8.9,9.1,9.3,9.5,9.7,9.9,10.1,10.3,10.5,10.7,10.9,11.1,11.3,11.5,11.7]]
FMPE1 = [[96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,142,146,150,154,158],
         [90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,136,140,144,148,152]]
FMPE2 = [[101,104,107,110,113,116,119,122,125,128,131,134,137,140,143,147,151,155,159,163],
         [97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,143,147,151,155,159]]
EM = [[215,222,229,237,245,250,255,260,265,270,275,280,285,290,295,305,315,325,335,345],
      [210,217,224,232,240,245,250,255,260,265,270,275,280,285,290,300,310,320,330,340],
      [205,212,219,227,235,240,245,250,255,260,265,270,275,280,285,295,305,315,325,335]]
TM = [[235,245,255,262,270,275,280,285,290,295,300,305,310,315,320,340,360,380,400,420],
      [230,235,240,247,255,260,265,270,275,280,285,290,295,300,305,325,345,365,385,405],
      [220,225,230,237,245,250,255,260,265,270,275,280,285,290,295,315,335,355,375,395]]
final = [100,95,90,85,80,78,76,74,72,70,68,66,64,62,60,50,40,30,20,10,0]
final1 = [100,95,90,85,80,76,72,68,64,60,50,40,30,20,10,0]

def GetFHL(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    if (XB=='1'):
        for i in range(20):
            if FHL1[int(str2)-11][i] <= int(str1):
                k = final[i]
                break
        return k
    else:
        for i in range(20):
            if FHL2[int(str2)-11][i] <= int(str1):
                k = final[i]
                break
        return k
def GetYWQZ(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    if (int(str2)>=17):
        return ''
    if (XB=='1'):
        for i in range(20):
            if YWQZ1[int(str2)-13][i] <= int(str1):
                k = final[i]
                break
        return k
    else:
        for i in range(20):
            if YWQZ2[int(str2)-13][i] <= int(str1):
                k = final[i]
                break
        return k
def GetZWTQQ(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    if (XB=='1'):
        for i in range(20):
            if ZWTQQ1[int(str2)-11][i] <= float(str1):
                k = final[i]
                break
        return k
    else:
        for i in range(20):
            if ZWTQQ2[int(str2)-11][i] <= float(str1):
                k = final[i]
                break
        return k
def GetYTXS(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    for i in range(int(str2)-5):
        if YTXS[int(str2)-17][i] <= int(str1):
            k = final[i]
            break
    return k
def GetLDTY(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    if (XB=='1'):
        for i in range(20):
            if LDTY1[int(str2)-17][i] <= int(str1):
                k = final[i]
                break
        return k
    else:
        for i in range(20):
            if LDTY2[int(str2)-17][i] <= int(str1):
                k = final[i]
                break
        return k
def GetTS(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    if (XB=='1'):
        for i in range(20):
            if TS1[int(str2)-11][i] <= int(str1):
                k = final[i]
                break
        return k
    else:
        for i in range(20):
            if TS2[int(str2)-11][i] <= int(str1):
                k = final[i]
                break
        return k
def GetFMP(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    if (XB=='1'):
        for i in range(20):
            if FMP1[int(str2)-11][i] >= float(str1):
                k = final[i]
                break
        return k
    else:
        for i in range(20):
            if FMP2[int(str2)-11][i] >= float(str1):
                k = final[i]
                break
        return k
def GetFMPE(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    if (XB=='1'):
        for i in range(20):
            if FMPE1[int(str2)-15][i] >= int(str1):
                k = final[i]
                break
        return k
    else:
        for i in range(20):
            if FMPE2[int(str2)-15][i] >= int(str1):
                k = final[i]
                break
        return k
def GetEM(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    for i in range(20):
        if EM[int(str2)-17][i] >= int(str1):
            k = final[i]
            break
    return k
def GetTM(value, XB, grade):#数值，性别，年级
    str1 = value.encode('utf-8')
    str2 = grade.encode('utf-8')
    k = 0
    for i in range(20):
        if TM[int(str2)-17][i] >= int(str1):
            k = final[i]
            break
    return k
def GetBMI(height, weight, XB, grade):
    str1 = height.encode('utf-8')
    str2 = weight.encode('utf-8')
    k = 100*100*float(str2)/(float(str1)*float(str1))
    if (XB=='1'):
        if (grade=='11'):
            if (k>=13.5 and k<=18.1):
                return '100'
            if (k<=13.4 or k>=18.2 and k<=20.3):
                return '80'
            if (k>=20.4):
                return '60'
        if (grade=='12'):
            if (k>=13.7 and k<=18.4):
                return '100'
            if (k<=13.6 or k>=18.5 and k<=20.4):
                return '80'
            if (k>=20.5):
                return '60'
        if (grade=='13'):
            if (k>=13.9 and k<=19.4):
                return '100'
            if (k<=13.8 or k>=19.5 and k<=22.1):
                return '80'
            if (k>=22.2):
                return '60'
        if (grade=='14'):
            if (k>=14.2 and k<=20.1):
                return '100'
            if (k<=14.1 or k>=20.2 and k<=22.6):
                return '80'
            if (k>=22.7):
                return '60'
        if (grade=='15'):
            if (k>=14.4 and k<=21.4):
                return '100'
            if (k<=14.3 or k>=21.5 and k<=24.1):
                return '80'
            if (k>=24.2):
                return '60'
        if (grade=='16'):
            if (k>=14.7 and k<=21.8):
                return '100'
            if (k<=14.6 or k>=21.9 and k<=24.5):
                return '80'
            if (k>=24.6):
                return '60'
        if (grade=='17'):
            if (k>=15.5 and k<=22.1):
                return '100'
            if (k<=15.4 or k>=22.2 and k<=24.9):
                return '80'
            if (k>=25.0):
                return '60'
        if (grade=='18'):
            if (k>=15.7 and k<=22.5):
                return '100'
            if (k<=15.6 or k>=22.6 and k<=25.2):
                return '80'
            if (k>=25.3):
                return '60'
        if (grade=='19'):
            if (k>=15.8 and k<=22.8):
                return '100'
            if (k<=15.7 or k>=22.9 and k<=26.0):
                return '80'
            if (k>=26.1):
                return '60'
    else:
        if (grade=='11'):
            if (k>=13.3 and k<=17.3):
                return '100'
            if (k<=13.2 or k>=17.4 and k<=19.2):
                return '80'
            if (k>=19.3):
                return '60'
        if (grade=='12'):
            if (k>=13.5 and k<=17.8):
                return '100'
            if (k<=13.4 or k>=17.9 and k<=20.2):
                return '80'
            if (k>=20.3):
                return '60'
        if (grade=='13'):
            if (k>=13.6 and k<=18.6):
                return '100'
            if (k<=13.5 or k>=18.7 and k<=21.1):
                return '80'
            if (k>=21.2):
                return '60'
        if (grade=='14'):
            if (k>=13.7 and k<=19.4):
                return '100'
            if (k<=13.6 or k>=19.5 and k<=22.0):
                return '80'
            if (k>=22.1):
                return '60'
        if (grade=='15'):
            if (k>=13.8 and k<=20.5):
                return '100'
            if (k<=13.7 or k>=20.6 and k<=22.9):
                return '80'
            if (k>=23.0):
                return '60'
        if (grade=='16'):
            if (k>=14.2 and k<=20.8):
                return '100'
            if (k<=14.1 or k>=20.9 and k<=23.6):
                return '80'
            if (k>=23.7):
                return '60'
        if (grade=='17'):
            if (k>=14.8 and k<=21.7):
                return '100'
            if (k<=14.7 or k>=21.8 and k<=24.4):
                return '80'
            if (k>=24.5):
                return '60'
        if (grade=='18'):
            if (k>=15.3 and k<=22.2):
                return '100'
            if (k<=15.2 or k>=22.3 and k<=24.8):
                return '80'
            if (k>=24.9):
                return '60'
        if (grade=='19'):
            if (k>=16.0 and k<=22.6):
                return '100'
            if (k<=15.9 or k>=22.7 and k<=25.1):
                return '80'
            if (k>=25.2):
                return '60'

    return 0
def GetZP(grade, XB, xm):#肺活量0，仰卧起坐1，坐位体前屈2，引体向上3，跳绳4，50米跑5，50*86，800米7，1000米8，bmi11，立定跳远12
    if (grade == '11'):
        if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[4] == ''):
            return ''
        else:
            return 0.15*int(float(xm[11]))+int(float(0.15*xm[0]))+0.2*int(float(xm[5]))+0.3*int(float(xm[2]))+0.2*int(float(xm[4]))
    if (grade == '12'):
        if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[4] == ''):
            return ''
        else:
            return 0.15*int(float(xm[11]))+0.15*int(float(xm[0]))+0.2*int(float(xm[5]))+0.3*int(float(xm[2]))+0.2*int(float(xm[4]))
    if (grade == '13'):
        if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[4] == '' or xm[1] == ''):
            return ''
        else:
            return 0.15*int(float(xm[11]))+0.15*int(float(xm[0]))+0.2*int(float(xm[5]))+0.2*int(float(xm[2]))+0.2*int(float(xm[4]))+0.1*int(float(xm[1]))
    if (grade == '14'):
        if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[4] == '' or xm[1] == ''):
            return ''
        else:
            return 0.15*int(float(xm[11]))+0.15*int(float(xm[0]))+0.2*xm[5]+0.2*int(float(xm[2]))+0.2*int(float(xm[4]))+0.1*int(float(xm[1]))
    if (grade == '15'):
        if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[4] == '' or xm[1] == '' or xm[6] == ''):
            return ''
        else:
            return 0.15*int(float(xm[11]))+0.15*int(float(xm[0]))+0.2*int(float(xm[5]))+0.1*int(float(xm[2]))+0.1*int(float(xm[4]))+0.2*int(float(xm[1]))+0.1*int(float(xm[6]))
    if (grade == '16'):
        if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[4] == '' or xm[1] == '' or xm[6] == ''):
            return ''
        else:
            return 0.15*int(float(xm[11]))+0.15*int(float(xm[0]))+0.2*int(float(xm[5]))+0.1*int(float(xm[2]))+0.1*int(float(xm[4]))+0.2*int(float(xm[1]))+0.1*int(float(xm[6]))
    if (grade == '17'):
        if (XB=='1'):
            if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[12] == '' or xm[3] == '' or xm[8] == ''):
                return ''
            else:
                return 0.15*int(float(xm[11]))+0.15*int(float(xm[0]))+0.2*int(float(xm[5]))+0.1*int(float(xm[2]))+0.1*int(float(xm[12]))+0.1*int(float(xm[3]))+0.2*int(float(xm[8]))
        else:
            if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[12] == '' or xm[1] == '' or xm[7] == ''):
                return ''
            else:
                return 0.15*int(float(xm[11]))+0.15*int(float(xm[0]))+0.2*int(float(xm[5]))+0.1*int(float(xm[2]))+0.1*int(float(xm[12]))+0.1*int(float(xm[1]))+0.2*int(float(xm[7]))
    if (grade == '18'):
        if (XB == '1'):
            if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[12] == '' or xm[3] == '' or xm[8] == ''):
                return ''
            else:
                return 0.15 * int(float(xm[11])) + 0.15 * int(float(xm[0])) + 0.2 * int(float(xm[5])) + 0.1 * int(float(xm[2])) + 0.1 * int(float(xm[12])) + 0.1 * int(float(xm[3])) + 0.2 * int(float(xm[8]))
        else:
            if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[12] == '' or xm[1] == '' or xm[7] == ''):
                return ''
            else:
                return 0.15 * int(float(xm[11])) + 0.15 * int(float(xm[0])) + 0.2 * int(float(xm[5])) + 0.1 * int(float(xm[2])) + 0.1 * int(float(xm[12])) + 0.1 * int(float(xm[1])) + 0.2 * int(float(xm[7]))
    if (grade == '19'):
        if (XB == '1'):
            if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[12] == '' or xm[3] == '' or xm[8] == ''):
                return ''
            else:
                return 0.15 * int(float(xm[11])) + 0.15 * int(float(xm[0])) + 0.2 * int(float(xm[5])) + 0.1 * int(float(xm[2])) + 0.1 * int(float(xm[12])) + 0.1 * int(float(xm[3])) + 0.2 * int(float(xm[8]))
        else:
            if (xm[11] == '' or xm[0] == '' or xm[5] == '' or xm[2] == '' or xm[12] == '' or xm[1] == '' or xm[7] == ''):
                return ''
            else:
                return 0.15 * int(float(xm[11])) + 0.15 * int(float(xm[0])) + 0.2 * int(float(xm[5])) + 0.1 * int(float(xm[2])) + 0.1 * int(float(xm[12])) + 0.1 * int(float(xm[1])) + 0.2 * int(float(xm[7]))
    return 0


conn = pymysql.connect(
    host='rm-bp1g43g6lem00l3goko.mysql.rds.aliyuncs.com', port=3306, user='root',
    passwd='eserc@123', charset='UTF8', database='mhedu2019_1'
)

sql = 'SELECT XM,XN,STUDENTID,NJMC,XBDM,NJDM,XXJC FROM mdw_j_student_xj_hsd2019 where XQ="2" limit 531291,50000'
#读取每个学生每个学年第二个学期的数据（姓名，学年，学生ID，年级，性别）
cursor = conn.cursor()
cursor.execute(sql)
results = cursor.fetchall()
for row in results:
    sql1 = 'SELECT XMID,CJ FROM mdw_f_sxjk_tnsz WHERE XN="'+row[1]+'" AND STUDENTID="'+row[2]+'"'
    cursor = conn.cursor()
    cursor.execute(sql1)
    results1 = cursor.fetchall()
    xm = ['', '', '', '', '', '', '', '', '', '', '', '', '']
    for row1 in results1:
        if row1[0] == '20':
            xm[0] = row1[1]
        if row1[0] == '19':
            xm[1] = row1[1]
        if row1[0] == '17':
            xm[2] = row1[1]
        if row1[0] == '18':
            xm[3] = row1[1]
        if row1[0] == '26':
            xm[4] = row1[1]
        if row1[0] == '27':
            xm[5] = row1[1]
        if row1[0] == '12':
            xm[6] = row1[1]
        if row1[0] == '13':
            xm[7] = row1[1]
        if row1[0] == '11':
            xm[8] = row1[1]
        if row1[0] == '22':
            xm[9] = row1[1]
        if row1[0] == '23':
            xm[10] = row1[1]
        if row1[0] == '28':
            xm[12] = row1[1]
    if (xm[0] != ''):
        xm[0] = GetFHL(xm[0], row[4], row[5])
    if (xm[1] != ''):
        xm[1] = GetYWQZ(xm[1], row[4], row[5])
    if (xm[2] != ''):
        xm[2] = GetZWTQQ(xm[2], row[4], row[5])
    if (xm[3] != ''):
        xm[3] = GetYTXS(xm[3], row[4], row[5])
    if (xm[4] != ''):
        xm[4] = GetTS(xm[4], row[4], row[5])
    if (xm[5] != ''):
        xm[5] = GetFMP(xm[5], row[4], row[5])
    if (xm[6] != ''):
        xm[6] = GetFMPE(xm[6], row[4], row[5])
    if (xm[7] != ''):
        xm[7] = GetEM(xm[7], row[4], row[5])
    if (xm[8] != ''):
        xm[8] = GetTM(xm[8], row[4], row[5])
    if (xm[9] != '' and xm[10] != ''):
        xm[11] = GetBMI(xm[9], xm[10], row[4], row[5])
    if (xm[12] != ''):
        xm[12] = GetLDTY(xm[12], row[4], row[5])

    ok = 1
    for i in range(13):
        if (xm[i] != ''):
            ok = 0
            break;
    if (ok ==0):
        zp = GetZP(row[5], row[4], xm)
    else:
        zp = ''
    sql2 = 'INSERT INTO XSZPN(XM,XN,STUDENTID,NJMC,XB,XXDM,FHL,YWQZ,ZWTQQ,YTXS,LDTY,TS,FMP,FMPE,EM,TM,HEIGHT,WEIGHT,BMI,ZP) VALUES ("' + row[0] + '","' + row[1] + '","' + row[2] + '","' + row[3] + '","' + row[4] + '","' + row[5] + '","' + str(xm[0]) + '","' + str(xm[1]) + '","' + str(xm[2]) + '","' + str(xm[3]) + '","' + str(xm[12]) + '","' + str(xm[4]) + '","' + str(xm[5]) + '","' + str(xm[6]) + '","' + str(xm[7]) + '","' + str(xm[8]) + '","' + str(xm[9]) + '","' + str(xm[10]) + '","' + str(xm[11]) + '","' + str(zp) + '")'
    cursor.execute(sql2)
    conn.commit()
        # 插入数据（姓名，学年，学生ID，年级，性别,12个项目，总评）
conn.close()